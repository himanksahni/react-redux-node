{"ast":null,"code":"var _jsxFileName = \"/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/components/employye/employee.js\";\nimport React from 'react';\nimport Survey from '../survey/survey';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { fetchEmployee } from '../../redux';\nimport { fetchSurvey } from '../../redux';\nlet assSurveys = [];\n\nclass Employee extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      empSur: [],\n      empAss: [],\n      value: -1\n    };\n    this.changeEmp = this.changeEmp.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchEmployees();\n    this.props.fetchSurveys();\n  }\n\n  changeEmp(e) {\n    this.setState({\n      value: e.target.value\n    });\n\n    if (e.target.value == -1) {\n      this.setState({\n        empSur: [],\n        empAss: []\n      });\n      return;\n    }\n\n    const employee = this.props.employees[e.target.value];\n    let sur = [...this.props.surveys];\n    let surcopy = [];\n    let assSur = [];\n    let empAss = [];\n\n    for (let i in employee.assSur) {\n      empAss.push(employee.assSur[i]);\n    }\n\n    for (let i in sur) {\n      if (empAss.includes(sur[i].sid)) {\n        assSur.push(sur[i]);\n      }\n    }\n\n    for (let i in sur) {\n      if (!empAss.includes(sur[i].sid)) {\n        surcopy.push(sur[i]);\n      }\n    }\n\n    this.setState({\n      empSur: surcopy,\n      empAss: assSur\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"columns is-centered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"employee has-text-centered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, \"Select Employee\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.changeEmp,\n      value: this.state.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, \"Select Employee\"), this.props.employees.map((employee, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: i,\n        value: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 40\n        }\n      }, employee.name);\n    }))))), /*#__PURE__*/React.createElement(Survey, {\n      empSur: this.state.empSur,\n      empAss: this.state.empAss,\n      employees: this.props.employees,\n      employee: this.props.employees[this.state.value],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"has-text-centered is-centered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button is-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"Done\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    employees: state.employee.employee,\n    surveys: state.survey.surveys,\n    assSurvey: state.survey.assSur\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchEmployees: () => dispatch(fetchEmployee()),\n    fetchSurveys: () => dispatch(fetchSurvey())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);","map":{"version":3,"sources":["/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/components/employye/employee.js"],"names":["React","Survey","axios","connect","fetchEmployee","fetchSurvey","assSurveys","Employee","Component","constructor","props","state","empSur","empAss","value","changeEmp","bind","componentDidMount","fetchEmployees","fetchSurveys","e","setState","target","employee","employees","sur","surveys","surcopy","assSur","i","push","includes","sid","render","map","name","mapStateToProps","survey","assSurvey","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Survey from '../survey/survey';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { fetchEmployee } from '../../redux'\nimport { fetchSurvey } from '../../redux'\n\nlet assSurveys=[]\n\nclass Employee extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            empSur:[],\n            empAss:[],\n            value : -1\n        }\n        this.changeEmp = this.changeEmp.bind(this)\n    }\n\n    componentDidMount(){\n        this.props.fetchEmployees()\n        this.props.fetchSurveys()\n \n    }\n\n    changeEmp(e){\n\n        this.setState({ value: e.target.value})\n        if(e.target.value == -1){\n            this.setState({\n                empSur: [],\n                empAss: []\n            })\n            return\n        }\n\n        const employee = this.props.employees[e.target.value]\n        let sur = [...this.props.surveys]\n        let surcopy = []\n        let assSur=[]\n        let empAss = [] \n\n        for (let i in employee.assSur){\n            empAss.push(employee.assSur[i])\n        }\n\n        for (let i in sur){\n            if (empAss.includes(sur[i].sid)){\n                assSur.push(sur[i])\n            }\n        }\n\n        for (let i in sur){\n            if (!empAss.includes(sur[i].sid)){\n                surcopy.push(sur[i])\n            }\n        }\n\n        this.setState({\n            empSur:surcopy,\n            empAss:assSur\n        })\n\n    }\n\n\n    render(){\n    return(\n        <div>\n            <div className=\"columns is-centered\">\n                <div className=\"employee has-text-centered\">\n                <h3>Select Employee</h3>\n                    <div className=\"select\">\n                        <select onChange={this.changeEmp} value={this.state.value}>\n                            <option value={-1}>Select Employee</option>\n                            { this.props.employees.map((employee,i) => {\n                                return <option key ={i} value={i}>{employee.name}</option>\n                            })}\n                        </select>\n                        </div>\n                </div>\n            </div>\n\n            <Survey empSur={this.state.empSur} \n                    empAss={this.state.empAss}\n                    employees={this.props.employees}\n                    employee ={this.props.employees[this.state.value]}/>\n\n            <div className=\"has-text-centered is-centered\">\n                <button className=\"button is-success\">Done</button>\n            </div>\n        </div>\n    )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        employees: state.employee.employee,\n        surveys: state.survey.surveys,\n        assSurvey: state.survey.assSur\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        \n        fetchEmployees: () => dispatch(fetchEmployee()),\n        fetchSurveys: () => dispatch(fetchSurvey())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);\n"]},"metadata":{},"sourceType":"module"}