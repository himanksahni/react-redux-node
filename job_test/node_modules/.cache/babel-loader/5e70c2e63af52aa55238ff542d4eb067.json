{"ast":null,"code":"var _jsxFileName = \"/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/components/survey/survey.js\";\nimport React from 'react';\nimport AssignedSurveys from './assigned_surveys';\nimport SurveyList from './survey_list';\nimport { connect } from 'react-redux';\n\nclass Survey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.assignSurvey = this.assignSurvey.bind(this);\n    this.removeSurvey = this.removeSurvey.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      this.setState({\n        surveys: this.props.empSur,\n        assignedSurveys: this.props.empAss,\n        employees: this.props.employees,\n        employee: this.props.employee\n      });\n    }\n  }\n\n  assignSurvey(sid) {\n    let newSurvey = \"\";\n    var indx;\n\n    for (indx in this.props.empSur) {\n      if (this.props.empSur[indx].sid === sid) {\n        newSurvey = this.props.empSur[indx];\n      }\n    }\n\n    let newAss = [...this.props.empAss, newSurvey];\n    let newSurList = this.props.empSur.filter(survey => {\n      return survey.sid !== sid;\n    });\n    this.setState({\n      surveys: newSurList,\n      assignedSurveys: newAss\n    });\n    this.this.props.employees[this.props.value].assSur.push(sid);\n  }\n\n  removeSurvey(sid) {\n    let newSurvey = \"\";\n    var indx;\n\n    for (indx in this.props.empAss) {\n      if (this.props.empAss[indx].sid === sid) {\n        newSurvey = this.props.empAss[indx];\n      }\n    }\n\n    let newSurrList = [...this.props.empSur, newSurvey];\n    let newAss = this.props.empAss.filter(survey => {\n      return survey.sid !== sid;\n    });\n    this.setState({\n      surveys: newSurrList,\n      assignedSurveys: newAss\n    });\n    const newAssSur = this.this.props.employees[this.props.value].assSur.filter(assSid => {\n      return assSid !== sid;\n    });\n    let newEmployee = {};\n    newEmployee = Object.assign(newEmployee, this.this.props.employees[this.props.value]);\n    newEmployee.assSur = newAssSur;\n    this.setState({\n      employee: newEmployee\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"columns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SurveyList, {\n      surveys: this.props.empSur,\n      addSurvey: this.assignSurvey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(AssignedSurveys, {\n      assSurveys: this.props.empAss,\n      removeSurvey: this.removeSurvey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    employees: state.employee.employee,\n    empSur: state.employee.empSur,\n    empAss: state.employee.empAss,\n    value: state.employee.value\n  };\n};\n\nexport default connect(mapStateToProps)(Survey);","map":{"version":3,"sources":["/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/components/survey/survey.js"],"names":["React","AssignedSurveys","SurveyList","connect","Survey","Component","constructor","props","assignSurvey","bind","removeSurvey","componentDidUpdate","prevProps","setState","surveys","empSur","assignedSurveys","empAss","employees","employee","sid","newSurvey","indx","newAss","newSurList","filter","survey","this","value","assSur","push","newSurrList","newAssSur","assSid","newEmployee","Object","assign","render","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AssignedSurveys from './assigned_surveys';\nimport SurveyList from './survey_list';\nimport { connect } from 'react-redux';\n\nclass Survey extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.assignSurvey = this.assignSurvey.bind(this)\n        this.removeSurvey = this.removeSurvey.bind(this)\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props !== prevProps){\n         this.setState({\n          surveys:this.props.empSur,\n          assignedSurveys: this.props.empAss,\n          employees: this.props.employees,\n          employee: this.props.employee\n         })\n        }\n    }\n\n    assignSurvey(sid){\n        let newSurvey = \"\"\n        var indx\n        for (indx in this.props.empSur){\n            if (this.props.empSur[indx].sid === sid){\n                newSurvey = this.props.empSur[indx]\n            }\n        }\n        let newAss = [...this.props.empAss, newSurvey]\n        let newSurList = this.props.empSur.filter(survey=>{\n           return survey.sid!==sid\n        })\n\n        this.setState({\n            surveys: newSurList,\n            assignedSurveys: newAss})\n\n        this.this.props.employees[this.props.value].assSur.push(sid)\n\n    }\n\n    removeSurvey(sid){\n        let newSurvey = \"\"\n        var indx\n        for (indx in this.props.empAss){\n            if (this.props.empAss[indx].sid === sid){\n                newSurvey = this.props.empAss[indx]\n            }\n        }\n        let newSurrList = [...this.props.empSur, newSurvey]\n        let newAss = this.props.empAss.filter(survey=>{\n           return survey.sid!==sid\n        })\n\n        this.setState({\n            surveys: newSurrList,\n            assignedSurveys: newAss})\n\n        const newAssSur = this.this.props.employees[this.props.value].assSur.filter(assSid=>{\n            return assSid !== sid;\n        })\n        let newEmployee = {}\n        newEmployee = Object.assign(newEmployee, this.this.props.employees[this.props.value])\n        newEmployee.assSur = newAssSur\n        this.setState({\n            employee: newEmployee\n        })\n\n    }\n\n    render(){\n        return(\n            <div className=\"columns\">\n                    <SurveyList surveys={this.props.empSur} addSurvey = {this.assignSurvey}/>\n                    <AssignedSurveys assSurveys={this.props.empAss} removeSurvey={this.removeSurvey}/>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        employees: state.employee.employee,\n        empSur: state.employee.empSur,\n        empAss: state.employee.empAss,\n        value: state.employee.value\n    }\n}\n\nexport default connect(mapStateToProps)(Survey)"]},"metadata":{},"sourceType":"module"}