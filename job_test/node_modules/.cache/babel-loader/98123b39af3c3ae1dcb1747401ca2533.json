{"ast":null,"code":"import { FETCH_EMPLOYEE_REQUEST, FETCH_EMPLOYEE_SUCCESS, FETCH_EMPLOYEE_ERROR, CHANGE_EMPLOYEE, ASSIGN_EMPLOYEE_SURVEY } from './employeeTypes';\nconst initialState = {\n  loading: false,\n  employee: [],\n  empSur: [],\n  empAss: [],\n  value: -1,\n  err: ''\n};\n\nconst empReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_EMPLOYEE_REQUEST:\n      console.log(\"reducer 1\");\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_EMPLOYEE_SUCCESS:\n      console.log(\"reducer 2\");\n      return { ...state,\n        employee: action.payload,\n        loading: true\n      };\n\n    case FETCH_EMPLOYEE_ERROR:\n      console.log(\"reducer 3\");\n      return { ...state,\n        loading: false,\n        err: action.payload\n      };\n\n    case CHANGE_EMPLOYEE:\n      if (action.payload.indx == -1) {\n        return { ...state,\n          empSur: [],\n          empAss: [],\n          value: action.payload.indx\n        };\n      }\n\n      const employee = state.employee[action.payload.indx];\n      console.log(action.payload);\n      let sur = [...action.payload.surveys];\n      let surcopy = [];\n      let assSur = [];\n      let empAss = [];\n\n      for (let i in employee.assSur) {\n        empAss.push(employee.assSur[i]);\n      }\n\n      for (let i in sur) {\n        if (empAss.includes(sur[i].sid)) {\n          assSur.push(sur[i]);\n        }\n      }\n\n      for (let i in sur) {\n        if (!empAss.includes(sur[i].sid)) {\n          surcopy.push(sur[i]);\n        }\n      }\n\n      return { ...state,\n        empSur: surcopy,\n        empAss: assSur,\n        value: action.payload.indx\n      };\n\n    case ASSIGN_EMPLOYEE_SURVEY:\n      const {\n        sid\n      } = action.payload;\n      let newSurvey = \"\";\n      var indx = 0;\n      console.log(state.empSur);\n\n      while (indx < state.empSur.length) {\n        console.log(state.empSur[indx]);\n\n        if (state.empSur[indx].sid === sid) {\n          console.log(indx);\n          newSurvey = state.empSur[indx];\n        }\n\n        indx += 1;\n      }\n\n      let newAss = [...state.empAss, newSurvey];\n      let newSurList = state.empSur.filter(survey => {\n        return survey.sid !== sid;\n      });\n      const newEmpAss = [...state.employee[state.value].assSur, sid];\n      let newEmployees = [...state.employee];\n      newEmployees[state.value].assSur = newEmpAss;\n      return { ...state,\n        employee: newEmployees,\n        empSur: newSurList\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default empReducer;","map":{"version":3,"sources":["/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/redux/employee/employeeReducer.js"],"names":["FETCH_EMPLOYEE_REQUEST","FETCH_EMPLOYEE_SUCCESS","FETCH_EMPLOYEE_ERROR","CHANGE_EMPLOYEE","ASSIGN_EMPLOYEE_SURVEY","initialState","loading","employee","empSur","empAss","value","err","empReducer","state","action","type","console","log","payload","indx","sur","surveys","surcopy","assSur","i","push","includes","sid","newSurvey","length","newAss","newSurList","filter","survey","newEmpAss","newEmployees"],"mappings":"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","sourcesContent":["import {FETCH_EMPLOYEE_REQUEST,\n        FETCH_EMPLOYEE_SUCCESS,\n        FETCH_EMPLOYEE_ERROR,\n        CHANGE_EMPLOYEE,\n        ASSIGN_EMPLOYEE_SURVEY} \nfrom './employeeTypes';\n\nconst initialState = {\n    loading: false,\n    employee:[],\n    empSur:[],\n    empAss:[],\n    value: -1,\n    err:''\n}\n\nconst empReducer = (state = initialState, action) =>{\n\n    switch(action.type){\n        case FETCH_EMPLOYEE_REQUEST:\n            console.log(\"reducer 1\")\n            return {\n                ...state,\n                loading: true\n            }\n            \n        case FETCH_EMPLOYEE_SUCCESS:\n            console.log(\"reducer 2\")\n            return {\n                ...state,\n                employee: action.payload,\n                loading: true\n            }\n        case FETCH_EMPLOYEE_ERROR:\n            console.log(\"reducer 3\")\n            return {\n                ...state,\n                loading: false,\n                err: action.payload\n            }\n        case CHANGE_EMPLOYEE:\n\n            if(action.payload.indx == -1){\n                return{ \n                    ...state,\n                    empSur:[],\n                    empAss:[],\n                    value: action.payload.indx\n                }\n            }\n            const employee = state.employee[action.payload.indx]\n            console.log(action.payload)\n            let sur = [...action.payload.surveys]\n            let surcopy = []\n            let assSur=[]\n            let empAss = [] \n\n            for (let i in employee.assSur){\n                empAss.push(employee.assSur[i])\n            }\n\n            for (let i in sur){\n                if (empAss.includes(sur[i].sid)){\n                    assSur.push(sur[i])\n                }\n            }\n\n            for (let i in sur){\n                if (!empAss.includes(sur[i].sid)){\n                    surcopy.push(sur[i])\n                }\n            }\n\n            return { \n                ...state,\n                empSur:surcopy,\n                empAss:assSur,\n                value: action.payload.indx\n            }\n        case ASSIGN_EMPLOYEE_SURVEY:\n            const { sid } = action.payload\n            let newSurvey = \"\"\n            var indx = 0\n            console.log(state.empSur)\n            while (indx < state.empSur.length){\n                console.log(state.empSur[indx])\n                if (state.empSur[indx].sid === sid){\n                    console.log(indx)\n                    newSurvey = state.empSur[indx]\n                }\n                indx+=1\n            }\n            let newAss = [...state.empAss, newSurvey]\n            let newSurList = state.empSur.filter(survey => {\n                return survey.sid!==sid\n            })\n\n            const newEmpAss = [...state.employee[state.value].assSur, sid]\n            let newEmployees = [...state.employee]\n            newEmployees[state.value].assSur = newEmpAss\n\n            return{\n\n                ...state,\n                employee: newEmployees,\n                empSur: newSurList,\n                \n            }\n\n        default: \n            return state\n    }\n}\n\nexport default empReducer;"]},"metadata":{},"sourceType":"module"}