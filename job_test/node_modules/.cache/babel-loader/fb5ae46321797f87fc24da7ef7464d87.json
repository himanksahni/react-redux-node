{"ast":null,"code":"import { FETCH_EMPLOYEE_REQUEST, FETCH_EMPLOYEE_SUCCESS, FETCH_EMPLOYEE_ERROR, CHANGE_EMPLOYEE, ASSIGN_EMPLOYEE_SURVEY, REMOVE_EMPLOYEE_SURVEY } from './employeeTypes';\nconst initialState = {\n  loading: false,\n  employee: [],\n  empSur: [],\n  empAss: [],\n  value: -1,\n  err: ''\n};\n\nconst empReducer = (state = initialState, action) => {\n  let newSurvey = \"\";\n  let newAss;\n  let indx = 0;\n  let newSurList;\n  let newEmpAss;\n  let sid;\n  let newEmployees;\n\n  switch (action.type) {\n    case FETCH_EMPLOYEE_REQUEST:\n      console.log(\"reducer 1\");\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_EMPLOYEE_SUCCESS:\n      console.log(\"reducer 2\");\n      return { ...state,\n        employee: action.payload,\n        loading: true\n      };\n\n    case FETCH_EMPLOYEE_ERROR:\n      console.log(\"reducer 3\");\n      return { ...state,\n        loading: false,\n        err: action.payload\n      };\n\n    case CHANGE_EMPLOYEE:\n      if (action.payload.indx == -1) {\n        return { ...state,\n          empSur: [],\n          empAss: [],\n          value: action.payload.indx\n        };\n      }\n\n      const employee = state.employee[action.payload.indx];\n      console.log(action.payload);\n      let sur = [...action.payload.surveys];\n      let surcopy = [];\n      let assSur = [];\n      let empAss = [];\n\n      for (let i in employee.assSur) {\n        empAss.push(employee.assSur[i]);\n      }\n\n      for (let i in sur) {\n        if (empAss.includes(sur[i].sid)) {\n          assSur.push(sur[i]);\n        }\n      }\n\n      for (let i in sur) {\n        if (!empAss.includes(sur[i].sid)) {\n          surcopy.push(sur[i]);\n        }\n      }\n\n      return { ...state,\n        empSur: surcopy,\n        empAss: assSur,\n        value: action.payload.indx\n      };\n\n    case ASSIGN_EMPLOYEE_SURVEY:\n      sid = action.payload;\n\n      while (indx < state.empSur.length) {\n        if (state.empSur[indx].sid === sid) {\n          console.log(indx);\n          newSurvey = state.empSur[indx];\n        }\n\n        indx += 1;\n      }\n\n      newAss = [...state.empAss, newSurvey];\n      newSurList = state.empSur.filter(survey => {\n        return survey.sid !== sid;\n      });\n      newEmpAss = [...state.employee[state.value].assSur, sid];\n      newEmployees = [...state.employee];\n      newEmployees[state.value].assSur = newEmpAss;\n      return { ...state,\n        employee: newEmployees,\n        empSur: newSurList,\n        empAss: newAss\n      };\n\n    case REMOVE_EMPLOYEE_SURVEY:\n      sid = action.payload;\n\n      while (indx < state.empSur.length) {\n        if (state.empAss[indx].sid === sid) {\n          newSurvey = state.empAss[indx];\n        }\n\n        indx += 1;\n      }\n\n      newSurList = [...state.empSur, newSurvey];\n      newAss = state.empAss.filter(survey => {\n        return survey.sid !== sid;\n      });\n      newEmpAss = state.employee[state.value].assSur.filter(assSid => {\n        return assSid !== sid;\n      });\n      newEmployees = [...state.employee];\n      newEmployees[state.value].assSur = newEmpAss;\n      return { ...state,\n        employee: newEmployees,\n        empSur: newSurList,\n        empAss: newAss\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default empReducer;","map":{"version":3,"sources":["/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/redux/employee/employeeReducer.js"],"names":["FETCH_EMPLOYEE_REQUEST","FETCH_EMPLOYEE_SUCCESS","FETCH_EMPLOYEE_ERROR","CHANGE_EMPLOYEE","ASSIGN_EMPLOYEE_SURVEY","REMOVE_EMPLOYEE_SURVEY","initialState","loading","employee","empSur","empAss","value","err","empReducer","state","action","newSurvey","newAss","indx","newSurList","newEmpAss","sid","newEmployees","type","console","log","payload","sur","surveys","surcopy","assSur","i","push","includes","length","filter","survey","assSid"],"mappings":"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","sourcesContent":["import {FETCH_EMPLOYEE_REQUEST,\n        FETCH_EMPLOYEE_SUCCESS,\n        FETCH_EMPLOYEE_ERROR,\n        CHANGE_EMPLOYEE,\n        ASSIGN_EMPLOYEE_SURVEY,\n        REMOVE_EMPLOYEE_SURVEY} \nfrom './employeeTypes';\n\nconst initialState = {\n    loading: false,\n    employee:[],\n    empSur:[],\n    empAss:[],\n    value: -1,\n    err:''\n}\n\nconst empReducer = (state = initialState, action) =>{\n\n    let newSurvey = \"\"\n    let newAss;\n    let indx = 0\n    let newSurList;\n    let newEmpAss;\n    let  sid;\n    let newEmployees;\n    switch(action.type){\n        case FETCH_EMPLOYEE_REQUEST:\n            console.log(\"reducer 1\")\n            return {\n                ...state,\n                loading: true\n            }\n            \n        case FETCH_EMPLOYEE_SUCCESS:\n            console.log(\"reducer 2\")\n            return {\n                ...state,\n                employee: action.payload,\n                loading: true\n            }\n        case FETCH_EMPLOYEE_ERROR:\n            console.log(\"reducer 3\")\n            return {\n                ...state,\n                loading: false,\n                err: action.payload\n            }\n        case CHANGE_EMPLOYEE:\n\n            if(action.payload.indx == -1){\n                return{ \n                    ...state,\n                    empSur:[],\n                    empAss:[],\n                    value: action.payload.indx\n                }\n            }\n            const employee = state.employee[action.payload.indx]\n            console.log(action.payload)\n            let sur = [...action.payload.surveys]\n            let surcopy = []\n            let assSur=[]\n            let empAss = [] \n\n            for (let i in employee.assSur){\n                empAss.push(employee.assSur[i])\n            }\n\n            for (let i in sur){\n                if (empAss.includes(sur[i].sid)){\n                    assSur.push(sur[i])\n                }\n            }\n\n            for (let i in sur){\n                if (!empAss.includes(sur[i].sid)){\n                    surcopy.push(sur[i])\n                }\n            }\n\n            return { \n                ...state,\n                empSur:surcopy,\n                empAss:assSur,\n                value: action.payload.indx\n            }\n        case ASSIGN_EMPLOYEE_SURVEY:\n            sid  = action.payload\n            while (indx < state.empSur.length){\n                if (state.empSur[indx].sid === sid){\n                    console.log(indx)\n                    newSurvey = state.empSur[indx]\n                }\n                indx+=1\n            }\n            newAss = [...state.empAss, newSurvey]\n            newSurList = state.empSur.filter(survey => {\n                return survey.sid!==sid\n            })\n\n            newEmpAss = [...state.employee[state.value].assSur, sid]\n            newEmployees = [...state.employee]\n            newEmployees[state.value].assSur = newEmpAss\n\n            return{\n\n                ...state,\n                employee: newEmployees,\n                empSur: newSurList,\n                empAss: newAss\n                \n            }\n        case REMOVE_EMPLOYEE_SURVEY:\n            sid = action.payload\n            while (indx < state.empSur.length){\n                if (state.empAss[indx].sid === sid){\n                    newSurvey = state.empAss[indx]\n                }\n                indx+=1\n            }\n            newSurList = [...state.empSur, newSurvey]\n            newAss = state.empAss.filter(survey=>{\n            return survey.sid!==sid\n            })\n\n            newEmpAss = state.employee[state.value].assSur.filter(assSid=>{\n                return assSid !== sid;\n            })\n\n            newEmployees = [...state.employee]\n            newEmployees[state.value].assSur = newEmpAss\n            \n            return{\n                ...state,\n                employee: newEmployees,\n                empSur: newSurList,\n                empAss: newAss\n                \n            }\n\n        default: \n            return state\n    }\n}\n\nexport default empReducer;"]},"metadata":{},"sourceType":"module"}