{"ast":null,"code":"var _jsxFileName = \"/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/components/survey/survey.js\";\nimport React from 'react';\nimport AssignedSurveys from './assigned_surveys';\nimport SurveyList from './survey_list';\nimport { connect } from 'react-redux';\nimport { assignEmployeeSurvey } from '../../redux';\n\nclass Survey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.assignSurvey = this.assignSurvey.bind(this);\n    this.removeSurvey = this.removeSurvey.bind(this);\n  } // componentDidUpdate(prevProps){\n  //     if(this.props !== prevProps){\n  //      this.setState({\n  //       surveys:this.props.empSur,\n  //       assignedSurveys: this.props.empAss,\n  //       employees: this.props.employees,\n  //       employee: this.props.employee\n  //      })\n  //     }\n  // }\n\n\n  assignSurvey(sid) {\n    let newSurvey = \"\";\n    var indx;\n\n    for (indx in this.props.empSur) {\n      if (this.props.empSur[indx].sid === sid) {\n        newSurvey = this.props.empSur[indx];\n      }\n    }\n\n    let newAss = [...this.props.empAss, newSurvey];\n    let newSurList = this.props.empSur.filter(survey => {\n      return survey.sid !== sid;\n    });\n    this.setState({\n      surveys: newSurList,\n      assignedSurveys: newAss\n    });\n    this.props.employees[this.props.value].assSur.push(sid);\n  }\n\n  removeSurvey(sid) {\n    let newSurvey = \"\";\n    var indx;\n\n    for (indx in this.props.empAss) {\n      if (this.props.empAss[indx].sid === sid) {\n        newSurvey = this.props.empAss[indx];\n      }\n    }\n\n    let newSurrList = [...this.props.empSur, newSurvey];\n    let newAss = this.props.empAss.filter(survey => {\n      return survey.sid !== sid;\n    });\n    this.setState({\n      surveys: newSurrList,\n      assignedSurveys: newAss\n    });\n    const newAssSur = this.this.props.employees[this.props.value].assSur.filter(assSid => {\n      return assSid !== sid;\n    });\n    let newEmployee = {};\n    newEmployee = Object.assign(newEmployee, this.this.props.employees[this.props.value]);\n    newEmployee.assSur = newAssSur;\n    this.setState({\n      employee: newEmployee\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"columns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SurveyList, {\n      surveys: this.props.empSur,\n      addSurvey: this.assignSurvey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(AssignedSurveys, {\n      assSurveys: this.props.empAss,\n      removeSurvey: this.removeSurvey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    employees: state.employee.employee,\n    empSur: state.employee.empSur,\n    empAss: state.employee.empAss,\n    value: state.employee.value\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    assignEmpSurvey: () => dispatch(fetchEmployee()),\n    fetchSurveys: () => dispatch(fetchSurvey()),\n    changeEmployees: (indx, surveys) => dispatch(changeEmployee(indx, surveys))\n  };\n};\n\nexport default connect(mapStateToProps)(Survey);","map":{"version":3,"sources":["/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/components/survey/survey.js"],"names":["React","AssignedSurveys","SurveyList","connect","assignEmployeeSurvey","Survey","Component","constructor","props","assignSurvey","bind","removeSurvey","sid","newSurvey","indx","empSur","newAss","empAss","newSurList","filter","survey","setState","surveys","assignedSurveys","employees","value","assSur","push","newSurrList","newAssSur","this","assSid","newEmployee","Object","assign","employee","render","mapStateToProps","state","mapDispatchToProps","dispatch","assignEmpSurvey","fetchEmployee","fetchSurveys","fetchSurvey","changeEmployees","changeEmployee"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AssignedSurveys from './assigned_surveys';\nimport SurveyList from './survey_list';\nimport { connect } from 'react-redux';\nimport { assignEmployeeSurvey  } from '../../redux'\n\nclass Survey extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.assignSurvey = this.assignSurvey.bind(this)\n        this.removeSurvey = this.removeSurvey.bind(this)\n    }\n\n    // componentDidUpdate(prevProps){\n    //     if(this.props !== prevProps){\n    //      this.setState({\n    //       surveys:this.props.empSur,\n    //       assignedSurveys: this.props.empAss,\n    //       employees: this.props.employees,\n    //       employee: this.props.employee\n    //      })\n    //     }\n    // }\n\n    assignSurvey(sid){\n        let newSurvey = \"\"\n        var indx\n        for (indx in this.props.empSur){\n            if (this.props.empSur[indx].sid === sid){\n                newSurvey = this.props.empSur[indx]\n            }\n        }\n        let newAss = [...this.props.empAss, newSurvey]\n        let newSurList = this.props.empSur.filter(survey=>{\n           return survey.sid!==sid\n        })\n\n        this.setState({\n            surveys: newSurList,\n            assignedSurveys: newAss})\n\n        this.props.employees[this.props.value].assSur.push(sid)\n\n    }\n\n    removeSurvey(sid){\n        let newSurvey = \"\"\n        var indx\n        for (indx in this.props.empAss){\n            if (this.props.empAss[indx].sid === sid){\n                newSurvey = this.props.empAss[indx]\n            }\n        }\n        let newSurrList = [...this.props.empSur, newSurvey]\n        let newAss = this.props.empAss.filter(survey=>{\n           return survey.sid!==sid\n        })\n\n        this.setState({\n            surveys: newSurrList,\n            assignedSurveys: newAss})\n\n        const newAssSur = this.this.props.employees[this.props.value].assSur.filter(assSid=>{\n            return assSid !== sid;\n        })\n        let newEmployee = {}\n        newEmployee = Object.assign(newEmployee, this.this.props.employees[this.props.value])\n        newEmployee.assSur = newAssSur\n        this.setState({\n            employee: newEmployee\n        })\n\n    }\n\n    render(){\n        return(\n            <div className=\"columns\">\n                    <SurveyList surveys={this.props.empSur} addSurvey = {this.assignSurvey}/>\n                    <AssignedSurveys assSurveys={this.props.empAss} removeSurvey={this.removeSurvey}/>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        employees: state.employee.employee,\n        empSur: state.employee.empSur,\n        empAss: state.employee.empAss,\n        value: state.employee.value\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        \n        assignEmpSurvey: () => dispatch(fetchEmployee()),\n        fetchSurveys: () => dispatch(fetchSurvey()),\n        changeEmployees: (indx, surveys) => dispatch(changeEmployee(indx, surveys))\n    }\n}\n\nexport default connect(mapStateToProps)(Survey)"]},"metadata":{},"sourceType":"module"}