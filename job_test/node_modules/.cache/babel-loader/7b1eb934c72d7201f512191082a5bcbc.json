{"ast":null,"code":"import { FETCH_EMPLOYEE_REQUEST, FETCH_EMPLOYEE_SUCCESS, FETCH_EMPLOYEE_ERROR, CHANGE_EMPLOYEE } from './employeeTypes';\nconst initialState = {\n  loading: false,\n  employee: [],\n  empSur: [],\n  empAss: [],\n  err: ''\n};\n\nconst empReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_EMPLOYEE_REQUEST:\n      console.log(\"reducer 1\");\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_EMPLOYEE_SUCCESS:\n      console.log(\"reducer 2\");\n      return { ...state,\n        employee: action.payload,\n        loading: true\n      };\n\n    case FETCH_EMPLOYEE_ERROR:\n      console.log(\"reducer 3\");\n      return { ...state,\n        loading: false,\n        err: action.payload\n      };\n\n    case CHANGE_EMPLOYEE:\n      const employee = state.employee[action.payload.indx];\n      let sur = [...action.payload.surveys];\n      let surcopy = [];\n      let assSur = [];\n      let empAss = [];\n\n      for (let i in employee.assSur) {\n        empAss.push(employee.assSur[i]);\n      }\n\n      for (let i in sur) {\n        if (empAss.includes(sur[i].sid)) {\n          assSur.push(sur[i]);\n        }\n      }\n\n      for (let i in sur) {\n        if (!empAss.includes(sur[i].sid)) {\n          surcopy.push(sur[i]);\n        }\n      }\n\n      return { ...state,\n        empSur: surcopy,\n        empAss: assSur\n      };\n\n    default:\n      console.log(\"reducer 4\");\n      return state;\n  }\n};\n\nexport default empReducer;","map":{"version":3,"sources":["/Users/himank/Desktop/PROJECTS/react_node_test/react_node_test2/job_test/src/redux/employee/employeeReducer.js"],"names":["FETCH_EMPLOYEE_REQUEST","FETCH_EMPLOYEE_SUCCESS","FETCH_EMPLOYEE_ERROR","CHANGE_EMPLOYEE","initialState","loading","employee","empSur","empAss","err","empReducer","state","action","type","console","log","payload","indx","sur","surveys","surcopy","assSur","i","push","includes","sid"],"mappings":"AAAA,SAAQA,sBAAR,EACIC,sBADJ,EAEIC,oBAFJ,EAGIC,eAHJ,QAIK,iBAJL;AAMA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,QAAQ,EAAC,EAFQ;AAGjBC,EAAAA,MAAM,EAAC,EAHU;AAIjBC,EAAAA,MAAM,EAAC,EAJU;AAKjBC,EAAAA,GAAG,EAAC;AALa,CAArB;;AAQA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAiC;AAEhD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKb,sBAAL;AACIc,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAO,EACH,GAAGJ,KADA;AAEHN,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAKJ,SAAKJ,sBAAL;AACIa,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAO,EACH,GAAGJ,KADA;AAEHL,QAAAA,QAAQ,EAAEM,MAAM,CAACI,OAFd;AAGHX,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKH,oBAAL;AACIY,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAO,EACH,GAAGJ,KADA;AAEHN,QAAAA,OAAO,EAAE,KAFN;AAGHI,QAAAA,GAAG,EAAEG,MAAM,CAACI;AAHT,OAAP;;AAKJ,SAAKb,eAAL;AAEI,YAAMG,QAAQ,GAAGK,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACI,OAAP,CAAeC,IAA9B,CAAjB;AACA,UAAIC,GAAG,GAAG,CAAC,GAAGN,MAAM,CAACI,OAAP,CAAeG,OAAnB,CAAV;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,MAAM,GAAC,EAAX;AACA,UAAIb,MAAM,GAAG,EAAb;;AAEA,WAAK,IAAIc,CAAT,IAAchB,QAAQ,CAACe,MAAvB,EAA8B;AAC1Bb,QAAAA,MAAM,CAACe,IAAP,CAAYjB,QAAQ,CAACe,MAAT,CAAgBC,CAAhB,CAAZ;AACH;;AAED,WAAK,IAAIA,CAAT,IAAcJ,GAAd,EAAkB;AACd,YAAIV,MAAM,CAACgB,QAAP,CAAgBN,GAAG,CAACI,CAAD,CAAH,CAAOG,GAAvB,CAAJ,EAAgC;AAC5BJ,UAAAA,MAAM,CAACE,IAAP,CAAYL,GAAG,CAACI,CAAD,CAAf;AACH;AACJ;;AAED,WAAK,IAAIA,CAAT,IAAcJ,GAAd,EAAkB;AACd,YAAI,CAACV,MAAM,CAACgB,QAAP,CAAgBN,GAAG,CAACI,CAAD,CAAH,CAAOG,GAAvB,CAAL,EAAiC;AAC7BL,UAAAA,OAAO,CAACG,IAAR,CAAaL,GAAG,CAACI,CAAD,CAAhB;AACH;AACJ;;AAED,aAAO,EACH,GAAGX,KADA;AAEHJ,QAAAA,MAAM,EAACa,OAFJ;AAGHZ,QAAAA,MAAM,EAACa;AAHJ,OAAP;;AAMJ;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACI,aAAOJ,KAAP;AAtDR;AAwDH,CA1DD;;AA4DA,eAAeD,UAAf","sourcesContent":["import {FETCH_EMPLOYEE_REQUEST,\n    FETCH_EMPLOYEE_SUCCESS,\n    FETCH_EMPLOYEE_ERROR,\n    CHANGE_EMPLOYEE} \nfrom './employeeTypes';\n\nconst initialState = {\n    loading: false,\n    employee:[],\n    empSur:[],\n    empAss:[],\n    err:''\n}\n\nconst empReducer = (state = initialState, action) =>{\n\n    switch(action.type){\n        case FETCH_EMPLOYEE_REQUEST:\n            console.log(\"reducer 1\")\n            return {\n                ...state,\n                loading: true\n            }\n            \n        case FETCH_EMPLOYEE_SUCCESS:\n            console.log(\"reducer 2\")\n            return {\n                ...state,\n                employee: action.payload,\n                loading: true\n            }\n        case FETCH_EMPLOYEE_ERROR:\n            console.log(\"reducer 3\")\n            return {\n                ...state,\n                loading: false,\n                err: action.payload\n            }\n        case CHANGE_EMPLOYEE:\n\n            const employee = state.employee[action.payload.indx]\n            let sur = [...action.payload.surveys]\n            let surcopy = []\n            let assSur=[]\n            let empAss = [] \n\n            for (let i in employee.assSur){\n                empAss.push(employee.assSur[i])\n            }\n\n            for (let i in sur){\n                if (empAss.includes(sur[i].sid)){\n                    assSur.push(sur[i])\n                }\n            }\n\n            for (let i in sur){\n                if (!empAss.includes(sur[i].sid)){\n                    surcopy.push(sur[i])\n                }\n            }\n\n            return { \n                ...state,\n                empSur:surcopy,\n                empAss:assSur\n            }\n\n        default: \n        console.log(\"reducer 4\")\n            return state\n    }\n}\n\nexport default empReducer;"]},"metadata":{},"sourceType":"module"}